import { Alert, Anchor, Button, Group, PasswordInput, TextInput } from '@mantine/core'
import { useForm, yupResolver } from '@mantine/form'
import { IconDatabase } from '@tabler/icons-react'
import axios from 'axios'
import { useAtom } from 'jotai'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { useState } from 'react'
import * as Yup from 'yup'

import { isLoadingAtom } from '@/store/question-atom'

const Home = () => {
  return (
    <>
      <Head>
        <title>Recurrot</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className=' flex min-h-screen flex-col bg-[#fafafa]'>
        <header className=' flex h-14 max-h-14 items-center justify-center bg-white'>
          <div className=' flex w-full max-w-[1200px] items-center justify-between px-8'>
            <Image src='/logo.svg' height={70} width={150} alt='Recurrot' priority />
            {/* height:{windowSize.height} width:{windowSize.width} */}
          </div>
        </header>
        <div className=' flex flex-col items-center justify-center gap-y-5'>
          <Image src={'/authLogo.svg'} alt='authLogo' width={500} height={300} />
          <Auth />
        </div>
      </div>
    </>
  )
}
export default Home

const schema = Yup.object().shape({
  email: Yup.string().email('Invalid email').required('No email provided'),
  password: Yup.string().required('No password provided').min(5, 'Password should be min 5 chars'),
})

export type AuthForm = {
  email: string
  password: string
}

const Auth = () => {
  const [isLoading, setIsLoading] = useAtom(isLoadingAtom)
  const [error, setError] = useState('')

  const [isRegister, setIsRegister] = useState(false)

  const router = useRouter()

  const handleForm = useForm<AuthForm>({
    validate: yupResolver(schema),
    initialValues: {
      email: '',
      password: '',
    },
  })

  const handleSubmit = async () => {
    setIsLoading(true)
    try {
      if (isRegister) {
        await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/signup`, {
          email: handleForm.values.email,
          password: handleForm.values.password,
        })
      }
      await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/login`, {
        email: handleForm.values.email,
        password: handleForm.values.password,
      })
      handleForm.reset()
      router.push('/dashboard/new-questions')
    } catch (e: any) {
      setIsLoading(false)
      setError(e.response.data.message)
    }
  }
  return (
    <main className=' flex h-fit w-full max-w-[500px] justify-center'>
      {error && (
        <Alert my='md' variant='filled' title='Authorization Error' color='red' radius='md'>
          {error}
        </Alert>
      )}
      <form onSubmit={handleForm.onSubmit(handleSubmit)} className=' flex w-full flex-col gap-y-5'>
        <div className=' flex flex-col gap-y-1'>
          <span>メールアドレス</span>
          <TextInput
            id='email'
            placeholder='example@gmail.com'
            styles={{ input: { border: 'none' } }}
            className='rounded bg-white py-1 shadow-md'
            {...handleForm.getInputProps('email')}
          />
        </div>
        <div className=' flex flex-col gap-y-1'>
          <span>パスワード(5文字以上)</span>
          <PasswordInput
            id='password'
            placeholder='password'
            styles={{ input: { border: 'none' } }}
            className='rounded bg-white py-1 shadow-md'
            {...handleForm.getInputProps('password')}
          />
        </div>
        <Group mt='xl' position='right'>
          <Anchor
            component='button'
            type='button'
            size='xs'
            className='text-gray-600'
            onClick={() => {
              setIsRegister(!isRegister)
              setError('')
            }}
          >
            {isRegister ? 'ログインはこちら' : '新規作成はこちら'}
          </Anchor>
          <Button
            className=' hover:transform-none'
            leftIcon={<IconDatabase size={14} />}
            color='blue'
            type='submit'
            loading={isLoading}
          >
            {isRegister ? '新規登録' : 'ログイン'}
          </Button>
        </Group>
      </form>
    </main>
  )
}
