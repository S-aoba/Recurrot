import { Button, Tooltip } from '@mantine/core'
import { useDisclosure } from '@mantine/hooks'
import { IconArrowLeft } from '@tabler/icons-react'
import { useAtom, useAtomValue } from 'jotai'
import Head from 'next/head'
import Link from 'next/link'

import { useDescriptionEditor } from '@/common/hook/useDescriptionEditor'
import { useMutateQuestion } from '@/common/hook/useMutateQuestion'
import { QuestionForm } from '@/component/ui/Form/Question'
import { Modal } from '@/component/ui/Modal'
import { editedQuestionAtom, questionDescriptionAtom } from '@/store/atom'

const QuestionEdit = () => {
  const editedQuestion = useAtomValue(editedQuestionAtom)
  const [isOpened, { open: handleOpen, close: handleClose }] = useDisclosure(false)

  const [description, _] = useAtom(questionDescriptionAtom)

  const { questionEditor } = useDescriptionEditor()

  const { updateQuestionMutation } = useMutateQuestion()

  const handleSubmit = () => {
    if (questionEditor) {
      updateQuestionMutation.mutate({
        id: editedQuestion.id,
        title: editedQuestion.title,
        description,
        hashtags: editedQuestion.hashtags,
      })
      questionEditor.commands.setContent('')
    }
  }

  return (
    <>
      <Head>
        <title>Recurrot - 新着</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Modal
        opened={isOpened}
        onClose={handleClose}
        onSubmit={handleSubmit}
        buttonWord={editedQuestion.id === '0' ? '投稿する' : '更新する'}
        modalTitle={editedQuestion.id === '0' ? 'Recurrotに投稿する' : '質問を更新する'}
      />

      <header className=' fixed z-10 w-full bg-white shadow'>
        <div className='flex h-14 max-h-14 items-center justify-center'>
          <div className=' flex w-full max-w-[900px] items-center justify-between px-6 py-2'>
            <Tooltip label='自分の質問一覧へ'>
              <Link href={'/dashboard/my-questions'} className=' text-black'>
                <IconArrowLeft size={30} />
              </Link>
            </Tooltip>
            <Button color='blue' type='button' onClick={handleOpen} className=' hover:transform-none'>
              {editedQuestion.id === '0' ? '投稿する' : '更新する'}
            </Button>
          </div>
        </div>
      </header>
      <main className=' flex h-fit min-h-screen flex-1 justify-center bg-[#fafafa] pt-14'>
        <div className=' h-fit w-full max-w-[1200px] px-8'>
          <QuestionForm />
        </div>
      </main>
    </>
  )
}

export default QuestionEdit
