import { ActionIcon, Avatar, Menu, Tooltip } from '@mantine/core'
import { useDisclosure } from '@mantine/hooks'
import { IconChevronDown, IconEdit, IconTrash } from '@tabler/icons-react'
import { useAtom, useSetAtom } from 'jotai'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'

import { useMutateAnswer } from '@/common/hook/useMutateAnswer'
import { useMutateQuestion } from '@/common/hook/useMutateQuestion'
import { useQueryAnswers } from '@/common/hook/useQueryAnswers'
import { useQuerySingleQuestion } from '@/common/hook/useQuerySingleQuestion'
import { useQueryUser } from '@/common/hook/useQueryUser'
import type { AnswerAndPostedUserInfoType } from '@/common/type'
import { DetailDescription } from '@/component/ui/DetaiDescription'
import { CreateAnswerForm, UpdateAnswerForm } from '@/component/ui/Form/Answer'
import { Loading } from '@/component/ui/Loading'
import { Modal } from '@/component/ui/Modal'
import {
  answerDescriptionAtom,
  editedAnswerAtom,
  editedQuestionAtom,
  navTabAtom,
  questionDescriptionAtom,
} from '@/store/question-atom'

const QuestionDetail = () => {
  const [isDeleteQuestionOpened, { open: handleDeleteQuestionOpen, close: handleDeleteQuestionClose }] =
    useDisclosure(false)

  const [id, setId] = useState<string>('')
  const router = useRouter()

  useEffect(() => {
    if (router.isReady) {
      if (typeof router.query.id === 'string') {
        setId(router.query.id)
      }
    }
  }, [router])

  const setNavTab = useSetAtom(navTabAtom)

  useEffect(() => {
    setNavTab({ main: null, sub: null })
  }, [setNavTab])

  const { data: question, status: questionStatus } = useQuerySingleQuestion(id)
  const { data: answers, status: answersStatus } = useQueryAnswers(id)
  const { data: user, status: userStatus } = useQueryUser()
  const { deleteQuestionMutation } = useMutateQuestion()

  const [editedQuestion, setEditedQuestion] = useAtom(editedQuestionAtom)
  const setDescription = useSetAtom(questionDescriptionAtom)

  if (questionStatus === 'loading' || answersStatus === 'loading' || userStatus === 'loading') return <Loading />

  const year = question && question.createdAt.toString().slice(0, 4)
  const month = question && question.createdAt.toString().slice(5, 7)
  const day = question && question.createdAt.toString().slice(8, 10)

  const defaultUserName = question && question.user.email.slice(0, question.user.email.indexOf('@'))

  const handleSetQuestion = () => {
    if (question) {
      setDescription(question.description)
      setEditedQuestion({ ...editedQuestion, id: question.id, title: question.title, hashtags: question.hashtags })
    }
  }

  const handleDeleteQuestion = () => {
    if (question) {
      deleteQuestionMutation.mutate(question.id)
      handleDeleteQuestionClose()
    }
  }

  return (
    <>
      <Head>
        <title>Recurrot - 新着</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Modal
        opened={isDeleteQuestionOpened}
        onClose={handleDeleteQuestionClose}
        onSubmit={handleDeleteQuestion}
        buttonWord='削除する'
        modalTitle='本当に削除してもよろしいですか？'
      />

      {question && answers && user && (
        <main className=' flex h-fit flex-1 flex-col items-center gap-y-10 p-5'>
          <div className=' flex w-full max-w-[1200px] flex-col items-center justify-center gap-y-5'>
            <div className=' w-full border-t-0 border-r-0 border-b border-l-0 border-solid border-gray-200 bg-white px-3 sm:w-10/12'>
              <p className=' text-2xl font-semibold sm:text-3xl'>{question.title}</p>
            </div>
            <div className=' w-full border border-solid border-gray-200 p-5 sm:w-9/12'>
              <div className=' py-5'>
                <div className=' flex items-center justify-between border-t-0 border-r-0 border-b border-l-0 border-solid border-gray-200 pb-2'>
                  <div className=' flex items-center gap-x-2 text-sm'>
                    <Avatar src={user.profileImage} radius={'xl'} />
                    <div className=' flex gap-x-2'>
                      <span>{question.user.userName === null ? defaultUserName : question.user.userName}</span>
                      <span>
                        投稿日: {year} / {month} / {day}
                      </span>
                    </div>
                  </div>
                  {user.id === question.userId && (
                    <div className=' flex items-center justify-center gap-x-2'>
                      <Tooltip label='編集する'>
                        <Link
                          href={'/dashboard/questions/edit'}
                          type='button'
                          className=' flex justify-center text-black no-underline'
                        >
                          <IconEdit size={23} className=' hover:cursor-pointer' onClick={handleSetQuestion} />
                        </Link>
                      </Tooltip>
                      <Menu>
                        <Menu.Target>
                          <ActionIcon className=' hover:transform-none'>
                            <IconChevronDown color='black' size={23} className=' hover:cursor-pointer' />
                          </ActionIcon>
                        </Menu.Target>
                        <Menu.Dropdown>
                          <Menu.Item onClick={handleDeleteQuestionOpen} icon={<IconTrash size={14} />}>
                            削除する
                          </Menu.Item>
                        </Menu.Dropdown>
                      </Menu>
                    </div>
                  )}
                </div>
                <div className=' flex gap-x-5 py-5'>
                  {question.hashtags &&
                    question.hashtags.map((hashtag) => {
                      return <HashtagList key={hashtag} hashtag={hashtag} />
                    })}
                </div>
                <DetailDescription description={question.description} />
              </div>
            </div>

            <div className=' w-full border-t-0 border-r-0 border-b border-l-0 border-solid border-gray-200 bg-white px-3 sm:w-10/12'>
              <p className=' mb-0 pb-2 text-2xl'>
                <span className=' font-semibold text-blue-500'>{answers.length}</span> 件の回答
              </p>
            </div>

            {answers.map((answer) => {
              return <Answer key={answer.id} answer={answer} userId={user.id} />
            })}

            <div className=' flex w-full flex-col justify-center sm:w-9/12'>
              <div>
                <p className=' text-xl'>あなたの回答</p>
                <CreateAnswerForm questionId={question.id} />
              </div>
            </div>
          </div>
        </main>
      )}
    </>
  )
}

export const getServerSideProps = async () => {
  return {
    props: {
      layout: 'WrapperLayout',
    },
  }
}

export default QuestionDetail

type Props = {
  answer: AnswerAndPostedUserInfoType
  userId?: string
  isEdit?: boolean
  setIsEdit?: React.Dispatch<React.SetStateAction<boolean>>
}

const AnswerBody: React.FC<Props> = ({ answer, isEdit, setIsEdit }) => {
  return (
    <>
      {isEdit && setIsEdit ? (
        <UpdateAnswerForm questionId={answer.questionId} setIsEdit={setIsEdit} />
      ) : (
        <DetailDescription description={answer.description} />
      )}
    </>
  )
}

const Answer: React.FC<Props> = ({ answer, userId }) => {
  const year = answer.createdAt.toString().slice(0, 4)
  const month = answer.createdAt.toString().slice(5, 7)
  const day = answer.createdAt.toString().slice(8, 10)

  const [isDeleteAnswerOpened, { open: handleDeleteAnswerOpen, close: handleDeleteAnswerClose }] = useDisclosure(false)

  const [isEdit, setIsEdit] = useState(false)
  const [_, setDescription] = useAtom(answerDescriptionAtom)
  const [editedAnswer, setEditedAnswer] = useAtom(editedAnswerAtom)

  const { deleteAnswerMutation } = useMutateAnswer(answer.questionId)

  const defaultUserName = answer && answer.user.email.slice(0, answer.user.email.indexOf('@'))

  const handleSetAnswer = () => {
    if (answer && setIsEdit) {
      setDescription(answer.description)
      setEditedAnswer({ ...editedAnswer, id: answer.id })
      setIsEdit(!isEdit)
    }
  }

  const handleDeleteAnswer = () => {
    if (answer) {
      deleteAnswerMutation.mutate(answer.id)
      handleDeleteAnswerClose()
    }
  }

  return (
    <>
      <Modal
        opened={isDeleteAnswerOpened}
        onClose={handleDeleteAnswerClose}
        onSubmit={handleDeleteAnswer}
        buttonWord='削除する'
        modalTitle='本当に削除してもよろしいですか？'
      />

      <div className=' w-full border border-solid border-gray-200 bg-white p-5 sm:w-9/12'>
        <div className=' py-5'>
          <div className=' flex items-center justify-between border-t-0 border-r-0 border-b border-l-0 border-solid border-gray-200 pb-2'>
            <div className=' flex items-center gap-x-2 text-sm'>
              <Avatar src={answer.user.profileImage} radius={'xl'} />
              <div className=' flex gap-x-2'>
                <span>
                  {answer && answer.user.userName === null ? defaultUserName : answer && answer.user.userName}
                </span>
                <span>
                  回答日: {year} / {month} / {day}
                </span>
              </div>
            </div>
            {answer.userId === userId && (
              <div className=' flex items-center justify-center gap-x-2'>
                <Tooltip label='編集する'>
                  <IconEdit size={23} className=' hover:cursor-pointer' onClick={handleSetAnswer} />
                </Tooltip>
                <Menu>
                  <Menu.Target>
                    <ActionIcon className=' hover:transform-none'>
                      <IconChevronDown color='black' size={23} className=' hover:cursor-pointer' />
                    </ActionIcon>
                  </Menu.Target>
                  <Menu.Dropdown>
                    <Menu.Item onClick={handleDeleteAnswerOpen} icon={<IconTrash size={14} />}>
                      削除する
                    </Menu.Item>
                  </Menu.Dropdown>
                </Menu>
              </div>
            )}
          </div>
          <AnswerBody answer={answer} isEdit={isEdit} setIsEdit={setIsEdit} />
        </div>
      </div>
    </>
  )
}

type HashtagListProps = {
  hashtag: string
}

const HashtagList: React.FC<HashtagListProps> = ({ hashtag }) => {
  return (
    <Link
      href={'/dashboard/new-questions'}
      key={hashtag}
      className=' flex items-center rounded-3xl border border-solid border-gray-200 px-3 py-1 text-black no-underline'
    >
      <Image
        src={`/langIcon/${hashtag}.svg`}
        width={20}
        height={20}
        alt={hashtag == 'csharp' ? 'C#' : `${hashtag}`}
        className='mr-2 rounded-full'
      />
      {hashtag == 'csharp' ? 'C#' : hashtag}
    </Link>
  )
}
