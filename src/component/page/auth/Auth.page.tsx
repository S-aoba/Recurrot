import { useForm, yupResolver } from '@mantine/form'
import axios from 'axios'
import { useAtom } from 'jotai'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState } from 'react'
import * as Yup from 'yup'

import { useGetWindowSize } from '@/common/hook/useGetWindowSize'
import { isLoadingAtom } from '@/store/atom'

import { Auth } from './Auth'

/**
 * @package
 */

const schema = Yup.object().shape({
  email: Yup.string().email('Invalid email').required('No email provided'),
  password: Yup.string().required('No password provided').min(5, 'Password should be min 5 chars'),
})

export type AuthForm = {
  email: string
  password: string
}

export const AuthPage = () => {
  const { windowSize } = useGetWindowSize()

  const [isLoading, setIsLoading] = useAtom(isLoadingAtom)
  const [error, setError] = useState('')

  const [isRegister, setIsRegister] = useState(false)

  const router = useRouter()

  const handleForm = useForm<AuthForm>({
    validate: yupResolver(schema),
    initialValues: {
      email: '',
      password: '',
    },
  })

  const handleSubmit = async () => {
    setIsLoading(true)
    try {
      if (isRegister) {
        await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/signup`, {
          email: handleForm.values.email,
          password: handleForm.values.password,
        })
      }
      await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/login`, {
        email: handleForm.values.email,
        password: handleForm.values.password,
      })
      handleForm.reset()
      router.push('/dashboard/new-questions')
    } catch (e: any) {
      setIsLoading(false)
      setError(e.response.data.message)
    }
  }

  return (
    <>
      <Head>
        <title>Recurrot</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Auth
        windowSize={windowSize}
        error={error}
        setError={setError}
        onForm={handleForm}
        onSubmit={handleSubmit}
        isRegister={isRegister}
        setIsRegister={setIsRegister}
        isLoading={isLoading}
      />
    </>
  )
}
