import { useAtom, useAtomValue, useSetAtom } from 'jotai'
import Head from 'next/head'
import { useRouter } from 'next/router'
import type { FormEvent } from 'react'
import { useState } from 'react'

import { useDescriptionEditor } from '@/common/hook/useDescriptionEditor'
import { useMutateQuestion } from '@/common/hook/useMutateQuestion'
import { editedQuestionAtom, questionDescriptionAtom, resetQuestionAtom } from '@/store/atom'

import { Edit } from './Edit'

/**
 * @package
 */

export const EditPage = () => {
  const router = useRouter()
  const resetEditedQuestion = useSetAtom(resetQuestionAtom)

  const editedQuestion = useAtomValue(editedQuestionAtom)

  const [isLoading, setIsLoading] = useState(false)

  const [description, _] = useAtom(questionDescriptionAtom)

  const { questionEditor } = useDescriptionEditor()

  const { updateQuestionMutation } = useMutateQuestion()

  const handleDiscardChangesAndRedirectToPostedQuestions = () => {
    if (editedQuestion.title !== '' || editedQuestion.hashtags.length !== 0 || description) {
      const isOk = window.confirm('入力した内容は破棄されます。よろしいですか？')
      if (isOk) {
        resetEditedQuestion()
        router.push('/dashboard/posted-questions')
        return
      }
      return
    }
    router.push('/dashboard/posted-questions')
    return
  }

  const handleUpdateQuestion = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setIsLoading(true)
    if (questionEditor && editedQuestion.id !== '0') {
      // 1秒後にupdateQuestionMutationを実行する
      setTimeout(() => {
        updateQuestionMutation.mutate({
          id: editedQuestion.id,
          title: editedQuestion.title,
          description,
          hashtags: editedQuestion.hashtags,
        })
      }, 1000)
    }
  }
  return (
    <>
      <Head>
        <title>Recurrot - 編集</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Edit
        onSubmit={handleUpdateQuestion}
        isLoading={isLoading}
        questionId={editedQuestion.id}
        onClick={handleDiscardChangesAndRedirectToPostedQuestions}
      />
    </>
  )
}
